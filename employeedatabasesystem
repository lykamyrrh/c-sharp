using System;
using System.IO;
using System.Linq;

class Employee
{
    private string name;
    private string id;
    private string designation;
    private int age;
    private int annualSalary;
    private int experience;

    private void WaitForEnter()
    {
        Console.WriteLine("\n\n\n Press enter to go back \n\n");
        Console.ReadLine();
    }

    private void ListEmployees()
    {
        Console.Clear();
        Console.WriteLine("\n\t      Employees Record\n");
        Console.WriteLine("\n----------------------------------------------");
        Console.WriteLine(" NAME        |     ID     |     POSITION");
        Console.WriteLine("----------------------------------------------");
        foreach (var line in File.ReadLines("data.txt"))
        {
            var parts = line.Split('"');
            Console.WriteLine($"\n{parts[1]}\t\t{parts[2].Trim()}\t\t{parts[3]}");
        }
        WaitForEnter();
    }

    private void ShowDetails()
    {
        Console.Clear();
        Console.Write("\n\nEnter Employee ID: ");
        var checkId = Console.ReadLine();
        bool found = false;

        foreach (var line in File.ReadLines("data.txt"))
        {
            var parts = line.Split('"');
            name = parts[1];
            id = parts[2].Trim();
            designation = parts[3];
            var details = parts[4].Trim().Split(' ');
            age = int.Parse(details[0]);
            annualSalary = int.Parse(details[1]);
            experience = int.Parse(details[2]);

            if (checkId == id)
            {
                found = true;
                Console.WriteLine("\n---------------------");
                Console.WriteLine($"Name: {name}");
                Console.WriteLine("---------------------");
                Console.WriteLine($"Id: {id}");
                Console.WriteLine("---------------------");
                Console.WriteLine($"Position: {designation}");
                Console.WriteLine("---------------------");
                Console.WriteLine($"Age: {age}");
                Console.WriteLine("---------------------");
                Console.WriteLine($"Annual Salary: {annualSalary}");
                Console.WriteLine("---------------------");
                Console.WriteLine($"Experience: {experience}");
                Console.WriteLine("---------------------");
            }
        }

        if (!found)
        {
            Console.WriteLine("\nEmployee ID not found.\n");
        }

        WaitForEnter();
    }

    private void EditExisting()
    {
        Console.Clear();
        Console.Write("\nEnter employee ID: ");
        var checkId = Console.ReadLine();

        if (!checkId.All(char.IsDigit))
        {
            Console.WriteLine("\nInvalid Employee ID.\n");
            WaitForEnter();
            return;
        }

        Console.WriteLine("\n-----------------------------");
        Console.Write("\nEnter new position: ");
        var newDesignation = Console.ReadLine();

        Console.WriteLine("------------------------------");
        Console.Write("\nEnter new Annual Salary: ");
        int newAnnualSalary;
        while (!int.TryParse(Console.ReadLine(), out newAnnualSalary) || newAnnualSalary < 0)
        {
            Console.Write("Invalid input. Please enter a valid Annual Salary: ");
        }

        var tempFile = Path.GetTempFileName();
        using (var writer = new StreamWriter(tempFile))
        using (var reader = new StreamReader("data.txt"))
        {
            string line;
            bool found = false;

            while ((line = reader.ReadLine()) != null)
            {
                var parts = line.Split('"');
                var tempId = parts[2].Trim();

                if (checkId == tempId)
                {
                    found = true;
                    writer.WriteLine($"\"{parts[1]}\" {tempId} \"{newDesignation}\" {parts[4]}");
                }
                else
                {
                    writer.WriteLine(line);
                }
            }

            if (!found)
            {
                Console.WriteLine("\nEmployee ID not found.\n");
            }
            else
            {
                Console.WriteLine("\nEmployee details updated successfully.\n");
            }
        }

        File.Delete("data.txt");
        File.Move(tempFile, "data.txt");
        WaitForEnter();
    }

    private void AddNewEmployee()
    {
        Console.Clear();
        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Name of Employee: ");
        var name = Console.ReadLine();

        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Employee ID [max 4 digits]: ");
        string idStr;
        while (true)
        {
            idStr = Console.ReadLine();
            if (idStr.All(char.IsDigit) && idStr.Length <= 4)
            {
                break;
            }
            Console.Write("Invalid input. Please enter a numeric Employee ID [max 4 digits]: ");
        }

        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Position: ");
        string designation;
        while (true)
        {
            designation = Console.ReadLine();
            if (designation.All(char.IsLetter))
            {
                break;
            }
            Console.Write("Invalid input. Please enter a valid position (letters only): ");
        }

        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Employee Age: ");
        int age;
        while (!int.TryParse(Console.ReadLine(), out age))
        {
            Console.Write("Invalid input. Please enter a valid Employee Age (digits only): ");
        }

        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Employee Annual Salary: ");
        double annualSalary;
        while (!double.TryParse(Console.ReadLine(), out annualSalary) || annualSalary < 0)
        {
            Console.Write("Invalid input. Please enter a valid Employee Annual Salary: ");
        }

        Console.WriteLine("\n----------------------------------------");
        Console.Write("\n Enter Employee Years of Experience: ");
        int experience;
        while (!int.TryParse(Console.ReadLine(), out experience) || experience < 0)
        {
            Console.Write("Invalid input. Please enter a valid Employee Years of Experience (digits only): ");
        }

        Console.WriteLine("\n----------------------------------------");
        Console.Write("Enter 'y' to save above information: ");
        var ch = Console.ReadLine();
        if (ch == "y")
        {
            using (var writer = new StreamWriter("data.txt", true))
            {
                writer.WriteLine($"\"{name}\" {idStr} \"{designation}\" {age} {annualSalary} {experience}");
            }
            Console.WriteLine("\nNew Employee has been added to the database\n");
        }
        else
        {
            AddNewEmployee();
        }

        WaitForEnter();
    }

    private void DeleteEmployeeDetails()
    {
        Console.Clear();
        Console.Write("\n----------------------------------");
        Console.Write("\nEnter Employee Id To Delete: ");
        var checkId = Console.ReadLine();
        Console.WriteLine("----------------------------------");
        Console.Write("\n\n\n\n\nCONFIRMATION\nEnter 'y' To Confirm Deletion: ");
        var ch = Console.ReadLine();

        if (ch == "y")
        {
            var tempFile = Path.GetTempFileName();
            using (var writer = new StreamWriter(tempFile))
            using (var reader = new StreamReader("data.txt"))
            {
                string line;
                bool found = false;

                while ((line = reader.ReadLine()) != null)
                {
                    var parts = line.Split('"');
                    var tempId = parts[2].Trim();

                    if (checkId != tempId)
                    {
                        writer.WriteLine(line);
                    }
                    else
                    {
                        found = true;
                    }
                }

                if (found)
                {
                    Console.WriteLine("\nRemoved Successfully\n");
                }
                else
                {
                    Console.WriteLine("\nEmployee ID not found.\n");
                }
            }

            File.Delete("data.txt");
            File.Move(tempFile, "data.txt");
            WaitForEnter();
        }
        else
        {
            DeleteEmployeeDetails();
        }
    }

    private void ClearAllEmployeeRecords()
    {
        Console.Clear();
        Console.Write("\n----------------------------------");
        Console.Write("\nCONFIRMATION\nEnter 'y' To confirm clearing all records: ");
        var ch = Console.ReadLine();

        if (ch == "y")
        {
            File.WriteAllText("data.txt", string.Empty);
            Console.WriteLine("\nAll Employee Records Cleared Successfully\n");
        }
        else
        {
            Console.WriteLine("\nOperation Cancelled\n");
        }

        WaitForEnter();
    }

    public void Options()
    {
        while (true)
        {
            Console.Clear();

            Console.WriteLine("\n\t\t  EMPLOYEE DATABASE MANAGEMENT SYSTEM ");
            Console.WriteLine("\n");
            Console.WriteLine("\n\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   1:   Display Employees List");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   2:   View Individual Employee Detail");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   3:   Update Existing Employee Details");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   4:   Add new Employee Detail");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   5:   Delete Employee Record");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   6:   Clear All Employee Records");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.WriteLine("\t\tENTER   0:   Exit Application     ");
            Console.WriteLine("\t\t------------------------------------------------");
            Console.Write("\n\n\t\t   Please Enter Your Choice: ");

            if (int.TryParse(Console.ReadLine(), out int choice))
            {
                switch (choice)
                {
                    case 1:
                        ListEmployees();
                        break;
                    case 2:
                        ShowDetails();
                        break;
                    case 3:
                        EditExisting();
                        break;
                    case 4:
                        AddNewEmployee();
                        break;
                    case 5:
                        DeleteEmployeeDetails();
                        break;
                    case 6:
                        ClearAllEmployeeRecords();
                        break;
                    case 0:
                        return;
                    default:
                        Console.WriteLine("Invalid choice, please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input, please enter a number.");
            }
        }
    }

    static void Main()
    {
        Employee emp = new Employee();
        emp.Options();
    }
}
